#include <iostream>
#include <windows.h>
#include <algorithm>
using namespace std;

class Array {
	unsigned int capacity = 10; // при створенні масиву, він одразу для себе робить запас пам'яті на 10 елементів
	int* data = new int[capacity];
	unsigned int length = 0; // фактична (реальна) кількість елементів, присутніх у масиві

public:
	Array() {}

	void AddToBack(int value) {
		if (length < capacity) // якщо виділенної зарання пам'яті ВИСТАЧАЄ для додавання чергового елемента
			data[length] = value;
		else { // АЛЕ ЯКЩО МІСЦЯ ВЖЕ НЕ ВИСТАЧАЄ, ТО
			// треба перевиділити пам'ять
			capacity *= 2; // збільшуємо запас пам'яті у 2 рази (можна і в 1.5, можна і в 1.2)
			// якщо був запас 10 елементів, то стане 20
			// якщо запас був 20 елементів, то стане 40, і тд
			int* temp = new int[capacity]; // новий масив буде в 2 рази більше по пам'яті
			// але в старому масиві все ще усього 10 елементів, тому цикл треба написати так, щоб зачепити лише старі елементі зі старого масиву
			for (int i = 0; i < length; i++) {
				temp[i] = data[i];
			}
			// в новий масив в кінець (по індексу 10) пишеться ОДИНАДЦЯТИЙ елемент
			temp[length] = value;
			delete[] data; // в цілях запобігання витокам пам'яті, чистимо пам'ять від старого масиву
			data = temp; // переставляємо покажчик на новий масив
		}
		length++;
	}

	void AddToFront(int value) {
		if (length < capacity) { // ще є вільна пам'ять під черговий елмент
			// перевиділяти пам'ять на 1 елемент кожен раз - погана ідея (якщо елементів буде більше ніж 300000+ то все буде відбуватися максимально повільно)
			// при тому що пам'ять вже виділена (є кепесіті), то доведеться зробити зсув для всіх існуючих елементів на 1 вправо
			for (int i = length - 1; i >= 0; i--) { // зсув іде справа наліво (тому що якщо робити його зліва направо, з початку масива в кінець) то можна втратити існуючі елементи
				data[i + 1] = data[i];
			}
			data[0] = value;
		}
		else { // АЛЕ ЯКЩО МІСЦЯ ВЖЕ НЕ ВИСТАЧАЄ, ТО
			// треба перевиділити пам'ять
			capacity *= 2; // збільшуємо запас пам'яті у 2 рази (можна і в 1.5, можна і в 1.2)
			// якщо був запас 10 елементів, то стане 20
			// якщо запас був 20 елементів, то стане 40, і тд
			int* temp = new int[capacity]; // новий масив буде в 2 рази більше по пам'яті
			// але в старому масиві все ще усього 10 елементів, тому цикл треба написати так, щоб зачепити лише старі елементі зі старого масиву
			for (int i = 0; i < length; i++) {
				temp[i + 1] = data[i];
			}
			// в новий масив в початок (по індексу 0) пишеться ОДИНАДЦЯТИЙ елемент
			temp[0] = value;
			delete[] data; // в цілях запобігання витокам пам'яті, чистимо пам'ять від старого масиву
			data = temp; // переставляємо покажчик на новий масив
		}
		length++;
	}

	void RemoveFromBack() {
		if (length == 0) {
			cout << "масив пустий, видаляти НЕМА ЧОГО!\n";
			return;
		}
		int* temp = new int[length - 1];
		for (int i = 0; i < length - 1; i++)
		{
			temp[i] = data[i];
		}
		delete[] data;
		data = temp;
		length--;
	}

	// RemoveFromFront
	void RemoveFromFront() {
		if (length == 0) {
			cout << "масив пустий, видаляти НЕМА ЧОГО!\n";
			return;
		}
		for (int i = 1; i < (int)length; i++)
			data[i - 1] = data[i];
		length--;
	}


	void Insert(int index, int value) {
		if (index < 0 || index >(int)length) {
			cout << "неправильний індекс\n";
			return;
		}

		
		if (length >= capacity) {
			int newCapacity = capacity * 2;
			int* temp = new int[newCapacity];
			for (int i = 0; i < (int)length; i++) {
				temp[i] = data[i];
			}
			delete[] data;
			data = temp;
			capacity = newCapacity;
		}

		for (int i = length - 1; i >= index; i--) {
			data[i + 1] = data[i];
		}

	
		data[index] = value;
		length++;
	}

	//IsEmpty()
	bool IsEmpty() const {
		return length == 0;
	}


	// RemoveByIndex(4);
	void RemoveByIndex(int index) {
		if (index < 0 || index >= (int)length) {
			cout << "неправильний індекс!\n";
			return;
		}
		for (int i = index; i < (int)length - 1; i++)
			data[i] = data[i + 1];
		length--;
	}

	// RemoveByValue(10);
	void RemoveByValue(int value) {
		int writeIndex = 0;
		for (int i = 0; i < (int)length; i++) {
			if (data[i] != value) {
				data[writeIndex++] = data[i];
			}
		}
		length = writeIndex;
	}


	// Sort();
	void Sort() {
		sort(data, data + length);
	}

	// Reverse();
	void Reverse() {
		for (int i = 0; i < length / 2; i++)
			swap(data[i], data[length - 1 - i]);
	}

	// Shuffle();
	void Shuffle() {
		for (int i = length - 1; i > 0; i--) {
			int a = rand() % (i + 1); 
			swap(data[i], data[a]);
		}
	}

	void Clear() {
		delete[] data;
		data = nullptr;
		length = 0;
		capacity = 0;
	}

	// RemoveFromFront
	// Insert
	// RemoveByIndex(4);
	// RemoveByValue(10);
	// Sort();
	// Reverse();
	// Shuffle();

	void Print() const {
		if (length == 0) {
			cout << "масив пустий!\n";
		}
		else {
			cout << "елементи масиву: ";
			for (int i = 0; i < length; i++)
			{
				cout << data[i] << " ";
			}
			cout << "\n";
		}
	}

	~Array() {
		cout << "D-TOR\n";
		if (data != nullptr) {
			delete[] data;
		}
	}

	Array(const Array& original) {
		cout << "COPY C-TOR\n";
		this->length = original.length;
		this->data = new int[length];
		for (int i = 0; i < length; i++)
			this->data[i] = original.data[i];
	}



	Array& operator=(const Array& other) {
		if (this == &other) return *this;
		delete[] data;
		capacity = other.capacity;
		length = other.length;
		data = new int[capacity];
		for (unsigned int i = 0; i < length; i++)
			data[i] = other.data[i];
		return *this;
	}

	Array(const char* str) {
		char buffer[1024];
		strncpy(buffer, str, 1023);
		buffer[1023] = '\0';
		char* token = strtok(buffer, " ");
		while (token != nullptr) {
			AddToBack(atoi(token));
			token = strtok(nullptr, " ");
		}
	}

	operator const char* () const {
		static char result[1024] = "";
		char temp[32];
		result[0] = '\0';
		for (unsigned int i = 0; i < length; i++) {
			sprintf(temp, "%d ", data[i]);
			strcat(result, temp);
		}
		return result;
	}



	friend ostream& operator<<(ostream& os, const Array& arr) {
		for (unsigned int i = 0; i < arr.length; i++)
			os << arr.data[i] << " ";
		return os;
	}

	friend istream& operator>>(istream& is, Array& arr) {
		int val;
		while (is >> val) {
			arr.AddToBack(val);
			if (is.peek() == '\n') break;
		}
		return is;
	}



	int& operator[](int index) {
		if (index < 0 || index >= (int)length)
			throw out_of_range("невірний індекс!");
		return data[index];
	}
	const int& operator[](int index) const {
		if (index < 0 || index >= (int)length)
			throw out_of_range("невірний індекс!");
		return data[index];
	}



	bool operator==(const Array& other) const {
		if (length != other.length) return false;
		for (unsigned int i = 0; i < length; i++)
			if (data[i] != other.data[i]) return false;
		return true;
	}

	bool operator!=(const Array& other) const {
		return !(*this == other);
	}



};

int main() {
	SetConsoleOutputCP(1251);
	srand(time(0));

	Array a;

	for (int i = 0; i < 1000; i++) {
		a.AddToFront(i);
	}
	a.Print();
}
